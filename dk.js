// Generated by CoffeeScript 1.9.2
(function() {
  var _, argv, container, cwd, daemon, daemonOrNot, dkp, dkparams, exec, extradk, filepath, fs, getJSON, i, isdk, len, optimist, param, path, subcmd, taskName;

  fs = require('fs');

  path = require('path');

  exec = require('child_process').exec;

  _ = require('lodash');

  optimist = require('optimist');

  argv = optimist["default"]('cwd', __dirname)["default"]('d', false).argv;

  daemon = argv.d !== false;

  container = argv._[0];

  subcmd = Array.prototype.slice.call(process.argv, 3);

  extradk = [];

  dkparams = ['-v', '-e', '--link', '-p'];

  while (subcmd.length > 0 && subcmd[0].charAt(0) === '-') {
    param = subcmd.shift();
    isdk = false;
    for (i = 0, len = dkparams.length; i < len; i++) {
      dkp = dkparams[i];
      if (param.substring(0, dkp.length) === dkp) {
        isdk = true;
      }
    }
    if (isdk) {
      extradk.push(param);
      if (param.charAt(1) !== '-') {
        extradk.push(subcmd.shift());
      }
    }
  }

  taskName = subcmd.length > 0 ? subcmd.join(' ') : 'bash';

  cwd = argv.cwd;

  filepath = path.join(cwd, './.dockerrc');

  daemonOrNot = daemon === true ? '-d' : '--rm -it';

  getJSON = function(next) {
    return fs.exists(filepath, function(exists) {
      if (!exists) {
        return next(null, {});
      }
      return fs.readFile(filepath, function(err, contents) {
        var tasks;
        if (err) {
          return next(err);
        }
        try {
          tasks = JSON.parse(contents);
        } catch (_error) {
          err = _error;
          if (err) {
            return next(err);
          }
        }
        return next(null, tasks);
      });
    });
  };

  getJSON(function(err, tasks) {
    var cmd, ref, ref1, ref2, ref3, task;
    if (err) {
      console.error((ref = err.stack) != null ? ref : err);
      process.exit(1);
    }
    task = tasks[taskName];
    if (!task) {
      task = {
        cmd: taskName
      };
    }
    if (tasks['*']) {
      task = _.merge(tasks['*'], task);
    }
    cmd = ["docker run " + daemonOrNot].concat(extradk).concat(_.map((ref3 = task.volumes) != null ? ref3 : {}, function(target, source) {
      source = path.resolve(cwd, source);
      return ['-v', source + ":" + target];
    })).concat(_.map((ref2 = task.env) != null ? ref2 : {}, function(val, name) {
      if ((val != null ? typeof val.charAt === "function" ? val.charAt(0) : void 0 : void 0) === '.') {
        val = path.resolve(cwd, val);
      }
      return ['-e', name + "=" + val];
    })).concat(_.map((ref1 = task.ports) != null ? ref1 : {}, function(hostPort, containerPort) {
      return ['-p', containerPort + ":" + hostPort];
    })).concat((task.name ? ["--name=" + task.name] : [])).concat([container]).concat(task.cmd);
    cmd = _.flatten(cmd).join(' ');
    if (task.name) {
      return exec("docker stop " + task.name, function(err, stdout, stderr) {
        return exec("docker rm " + task.name, function(err, stdout, stderr) {
          return console.log(cmd);
        });
      });
    } else {
      return console.log(cmd);
    }
  });

}).call(this);
